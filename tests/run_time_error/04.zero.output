.IFJcode19
DEFVAR GF@&expr&val
DEFVAR GF@&expr&val&type
DEFVAR GF@&res1
CREATEFRAME
PUSHS int@5
DEFVAR GF@a
POPS GF@a
PUSHS int@0
DEFVAR GF@b
POPS GF@b
PUSHS GF@a
PUSHS GF@b
CREATEFRAME
CALL $expr_div$
DEFVAR GF@vysl
POPS GF@vysl
CREATEFRAME
DEFVAR TF@%1
MOVE TF@%1 string@Vysledek:
DEFVAR TF@%2
MOVE TF@%2 GF@vysl
DEFVAR TF@%3
MOVE TF@%3 string@\010
PUSHFRAME
DEFVAR LF@%retval
MOVE LF@%retval nil@nil
TYPE GF@&res1 LF@%1
JUMPIFNEQ $write$1 GF@&res1 string@nil
WRITE string@None
JUMP $write$end$1
LABEL $write$1
WRITE LF@%1
LABEL $write$end$1
WRITE string@\032
TYPE GF@&res1 LF@%2
JUMPIFNEQ $write$2 GF@&res1 string@nil
WRITE string@None
JUMP $write$end$2
LABEL $write$2
WRITE LF@%2
LABEL $write$end$2
WRITE string@\032
TYPE GF@&res1 LF@%3
JUMPIFNEQ $write$3 GF@&res1 string@nil
WRITE string@None
JUMP $write$end$3
LABEL $write$3
WRITE LF@%3
LABEL $write$end$3
WRITE string@\010
POPFRAME
#   BUILT-IN FUNCTIONS
# STACK_DIV
JUMP $expr_div_end$
LABEL $expr_div$
PUSHFRAME
DEFVAR LF@$op1$
DEFVAR LF@$op2$
DEFVAR LF@$type1$
DEFVAR LF@$type2$
POPS LF@$op1$
POPS LF@$op2$
TYPE LF@$type1$ LF@$op1$
TYPE LF@$type2$ LF@$op2$
JUMPIFEQ $div_fail$ LF@$type1$ string@string
JUMPIFEQ $div_fail$ LF@$type2$ string@string
JUMPIFNEQ $div_not_same$ LF@$type1$ LF@$type2$
JUMPIFEQ $div_div$ LF@$type1$ string@float
INT2FLOAT LF@$op1$ LF@$op1$
INT2FLOAT LF@$op2$ LF@$op2$
LABEL $div_div$
JUMPIFEQ $div_zero$ LF@$op1$ float@0x0p+0
DIV LF@$op1$ LF@$op2$ LF@$op1$
JUMP $div_end$
LABEL $div_zero$
EXIT int@9
LABEL $div_fail$
EXIT int@4
LABEL $div_not_same$
JUMPIFNEQ $div_int2float_op2$ LF@$type2$ string@float
INT2FLOAT LF@$op1$ LF@$op1$
JUMP $div_div$
LABEL $div_int2float_op2$
INT2FLOAT LF@$op2$ LF@$op2$
JUMP $div_div$
LABEL $div_end$
PUSHS LF@$op1$
POPFRAME
RETURN
LABEL $expr_div_end$

.IFJcode19
DEFVAR GF@&expr&val
DEFVAR GF@&expr&val&type
DEFVAR GF@&res1
CREATEFRAME
PUSHS int@100
DEFVAR GF@a
POPS GF@a
PUSHS GF@a
PUSHS int@0
CREATEFRAME
CALL $expr_greater$
CALL %exprval_check%
LABEL %if%0
JUMPIFNEQ %false%0 GF@&expr&val bool@true
PUSHS GF@a
PUSHS int@5
CREATEFRAME
CALL $expr_greater$
CALL %exprval_check%
LABEL %if%1
JUMPIFNEQ %false%1 GF@&expr&val bool@true
PUSHS GF@a
PUSHS int@10
CREATEFRAME
CALL $expr_greater$
CALL %exprval_check%
LABEL %if%2
JUMPIFNEQ %false%2 GF@&expr&val bool@true
PUSHS GF@a
PUSHS int@20
CREATEFRAME
CALL $expr_greater$
CALL %exprval_check%
LABEL %if%3
JUMPIFNEQ %false%3 GF@&expr&val bool@true
PUSHS GF@a
PUSHS int@30
CREATEFRAME
CALL $expr_greater$
CALL %exprval_check%
LABEL %if%4
JUMPIFNEQ %false%4 GF@&expr&val bool@true
PUSHS GF@a
PUSHS int@120
CREATEFRAME
CALL $expr_greater$
CALL %exprval_check%
LABEL %if%5
JUMPIFNEQ %false%5 GF@&expr&val bool@true
JUMP %if_end%5
LABEL %false%5
CREATEFRAME
DEFVAR TF@%1
MOVE TF@%1 GF@a
PUSHFRAME
DEFVAR LF@%retval
MOVE LF@%retval nil@nil
TYPE GF@&res1 LF@%1
JUMPIFNEQ $write$0$1 GF@&res1 string@nil
WRITE string@None
JUMP $write$end$0$1
LABEL $write$0$1
WRITE LF@%1
LABEL $write$end$0$1
WRITE string@\010
POPFRAME
LABEL %if_end%5
JUMP %if_end%4
LABEL %false%4
LABEL %if_end%4
JUMP %if_end%3
LABEL %false%3
LABEL %if_end%3
JUMP %if_end%2
LABEL %false%2
LABEL %if_end%2
JUMP %if_end%1
LABEL %false%1
LABEL %if_end%1
JUMP %if_end%0
LABEL %false%0
PUSHS GF@a
PUSHS int@2
CREATEFRAME
CALL $expr_greater$
CALL %exprval_check%
LABEL %if%6
JUMPIFNEQ %false%6 GF@&expr&val bool@true
JUMP %if_end%6
LABEL %false%6
PUSHS GF@a
PUSHS int@3
CREATEFRAME
CALL $expr_greater$
CALL %exprval_check%
LABEL %if%7
JUMPIFNEQ %false%7 GF@&expr&val bool@true
JUMP %if_end%7
LABEL %false%7
PUSHS GF@a
PUSHS int@4
CREATEFRAME
CALL $expr_greater$
CALL %exprval_check%
LABEL %if%8
JUMPIFNEQ %false%8 GF@&expr&val bool@true
JUMP %if_end%8
LABEL %false%8
LABEL %if_end%8
LABEL %if_end%7
LABEL %if_end%6
LABEL %if_end%0
#   BUILT-IN FUNCTIONS
#  STACK_GREATER
JUMP $expr_greater_end$
LABEL $expr_greater$
PUSHFRAME
DEFVAR LF@$op1$
DEFVAR LF@$op2$
DEFVAR LF@$type1$
DEFVAR LF@$type2$
POPS LF@$op1$
POPS LF@$op2$
TYPE LF@$type1$ LF@$op1$
TYPE LF@$type2$ LF@$op2$
JUMPIFEQ $greater_fail$ LF@$type1$ string@bool
JUMPIFEQ $greater_fail$ LF@$type2$ string@bool
JUMPIFEQ $greater_fail$ LF@$type1$ string@nil
JUMPIFEQ $greater_fail$ LF@$type2$ string@nil
JUMPIFEQ $greater_gt$ LF@$type1$ LF@$type2$
JUMPIFEQ $greater_fail$ LF@$type1$ string@string
JUMPIFEQ $greater_fail$ LF@$type2$ string@string
JUMPIFEQ $greater_int2float_op2$ LF@$type2$ string@int
INT2FLOAT LF@$op1$ LF@$op1$
LABEL $greater_gt$
GT LF@$op1$ LF@$op2$ LF@$op1$
JUMP $greater_end$
LABEL $greater_fail$
EXIT int@4
LABEL $greater_int2float_op2$
INT2FLOAT LF@$op2$ LF@$op2$
JUMP $greater_gt$
LABEL $greater_end$
PUSHS LF@$op1$
POPFRAME
RETURN
LABEL $expr_greater_end$
#  IF_EXPRVAL_CHECK
JUMP %exprval_check%end
LABEL %exprval_check%
POPS GF@&expr&val
TYPE GF@&expr&val&type GF@&expr&val
JUMPIFNEQ %exprval_check%not_bool% GF@&expr&val&type string@bool
RETURN
LABEL %exprval_check%not_bool%
JUMPIFEQ %exprval_check%false GF@&expr&val&type string@nil
JUMPIFEQ %exprval_check%int GF@&expr&val&type string@int
JUMPIFEQ %exprval_check%float GF@&expr&val&type string@float
JUMPIFEQ %exprval_check%string GF@&expr&val&type string@string
LABEL %exprval_check%int
JUMPIFEQ %exprval_check%false GF@&expr&val int@0
MOVE GF@&expr&val bool@true
RETURN
LABEL %exprval_check%float
JUMPIFEQ %exprval_check%false GF@&expr&val float@0x0p+0
MOVE GF@&expr&val bool@true
RETURN
LABEL %exprval_check%string
JUMPIFEQ %exprval_check%false GF@&expr&val string@
MOVE GF@&expr&val bool@true
RETURN
LABEL %exprval_check%false
MOVE GF@&expr&val bool@false
RETURN
LABEL %exprval_check%end

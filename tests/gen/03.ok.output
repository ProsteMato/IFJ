.IFJcode19
DEFVAR GF@&expr&val
DEFVAR GF@&expr&val&type
DEFVAR GF@&res1
CREATEFRAME
PUSHS int@5
DEFVAR GF@ahoj
POPS GF@ahoj
PUSHS int@5
DEFVAR GF@svete
POPS GF@svete
PUSHS GF@ahoj
PUSHS GF@svete
CREATEFRAME
CALL $expr_equal$
CALL %exprval_check%
LABEL %if%0
JUMPIFNEQ %false%0 GF@&expr&val bool@true
CREATEFRAME
DEFVAR TF@%1
MOVE TF@%1 string@Vytisknu\032petku:
DEFVAR TF@%2
MOVE TF@%2 GF@svete
DEFVAR TF@%3
MOVE TF@%3 string@\010
PUSHFRAME
DEFVAR LF@%retval
MOVE LF@%retval nil@nil
TYPE GF@&res1 LF@%1
JUMPIFNEQ $write$0$1 GF@&res1 string@nil
WRITE string@None
JUMP $write$end$0$1
LABEL $write$0$1
WRITE LF@%1
LABEL $write$end$0$1
WRITE string@\032
TYPE GF@&res1 LF@%2
JUMPIFNEQ $write$0$2 GF@&res1 string@nil
WRITE string@None
JUMP $write$end$0$2
LABEL $write$0$2
WRITE LF@%2
LABEL $write$end$0$2
WRITE string@\032
TYPE GF@&res1 LF@%3
JUMPIFNEQ $write$0$3 GF@&res1 string@nil
WRITE string@None
JUMP $write$end$0$3
LABEL $write$0$3
WRITE LF@%3
LABEL $write$end$0$3
WRITE string@\010
POPFRAME
JUMP %if_end%0
LABEL %false%0
LABEL %if_end%0
#   BUILT-IN FUNCTIONS
#  STACK_EQUAL
JUMP $expr_equal_end$
LABEL $expr_equal$
PUSHFRAME
DEFVAR LF@$op1$
DEFVAR LF@$op2$
DEFVAR LF@$type1$
DEFVAR LF@$type2$
POPS LF@$op1$
POPS LF@$op2$
TYPE LF@$type1$ LF@$op1$
TYPE LF@$type2$ LF@$op2$
JUMPIFEQ $equal_eq$ LF@$type1$ LF@$type2$
JUMPIFEQ $equal_false$ LF@$type1$ string@nil
JUMPIFEQ $equal_false$ LF@$type2$ string@nil
JUMPIFEQ $equal_false$ LF@$type1$ string@string
JUMPIFEQ $equal_false$ LF@$type2$ string@string
JUMPIFEQ $equal_false$ LF@$type1$ string@bool
JUMPIFEQ $equal_false$ LF@$type2$ string@bool
JUMPIFEQ $equal_int2float_op2$ LF@$type2$ string@int
INT2FLOAT LF@$op1$ LF@$op1$
LABEL $equal_eq$
EQ LF@$op1$ LF@$op2$ LF@$op1$
JUMP $equal_end$
LABEL $equal_false$
MOVE LF@$op1$ bool@false
JUMP $equal_end$
LABEL $equal_int2float_op2$
INT2FLOAT LF@$op2$ LF@$op2$
JUMP $equal_eq$
LABEL $equal_end$
PUSHS LF@$op1$
POPFRAME
RETURN
LABEL $expr_equal_end$
#  IF_EXPRVAL_CHECK
JUMP %exprval_check%end
LABEL %exprval_check%
POPS GF@&expr&val
TYPE GF@&expr&val&type GF@&expr&val
JUMPIFNEQ %exprval_check%not_bool% GF@&expr&val&type string@bool
RETURN
LABEL %exprval_check%not_bool%
JUMPIFEQ %exprval_check%false GF@&expr&val&type string@nil
JUMPIFEQ %exprval_check%int GF@&expr&val&type string@int
JUMPIFEQ %exprval_check%float GF@&expr&val&type string@float
JUMPIFEQ %exprval_check%string GF@&expr&val&type string@string
LABEL %exprval_check%int
JUMPIFEQ %exprval_check%false GF@&expr&val int@0
MOVE GF@&expr&val bool@true
RETURN
LABEL %exprval_check%float
JUMPIFEQ %exprval_check%false GF@&expr&val float@0x0p+0
MOVE GF@&expr&val bool@true
RETURN
LABEL %exprval_check%string
JUMPIFEQ %exprval_check%false GF@&expr&val string@
MOVE GF@&expr&val bool@true
RETURN
LABEL %exprval_check%false
MOVE GF@&expr&val bool@false
RETURN
LABEL %exprval_check%end

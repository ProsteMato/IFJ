-----------------------------------------------------------------------------------------------
LL-grammer pre IFJ19
-----------------------------------------------------------------------------------------------
1: <prog> -> <st-list>
2: <st-list> -> <stat> EOL <st-list>
3: <st-list> -> EOF
4: <stat> -> def id ( <params> : EOL INDENT <func-nested-st-list>
5: <stat> -> id = <assign>
6: <stat> -> <expr>
7: <stat> -> pass
8: <stat> -> while <expr> : EOL INDENT <nested-st-list>
9: <stat> -> if <expr> : EOL INDENT <nested-st-list> else : EOL <nested-st-list>
10: <params> -> )
11: <params> -> id <next-param>
12: <next-param> -> , <params>
13: <next-param> -> )
14: <arg-params> -> )
15: <arg-params> -> <value> <arg-next-params>
16: <arg-next-params> -> , <value> <arg-next-params>
17: <arg-next-params> -> )
18: <value> -> none
19: <value> -> float
20: <value> -> string
21: <value> -> int
22: <value> -> id
23: <func-nested-st-list> -> <func-nested-stat> EOL <func-nested-st-list>
24: <func-nested-stat> -> pass
25: <func-nested-stat> -> if <expr> : EOL INDENT <func-nested-stat> else : EOL <func-nested-stat>
26: <func-nested-stat> -> <expr>
27: <func-nested-stat> -> while <expr> : EOL INDENT <func-nested-stat>
28: <func-nested-stat> -> id = <assign>
29: <func-nested-stat> -> return <expr>
30: <func-nested-stat> -> DEDENT
31: <nested-st-list> -> <nested-stat> EOL <nested-st-list>
32: <nested-stat> -> pass
33: <nested-stat> -> if <expr> : EOL INDENT <nested-st-list> else : EOL <nested-st-list>
34: <nested-stat> -> <expr>
35: <nested-stat> -> while <expr> : EOL INDENT <nested-st-list>
36: <nested-stat> -> id = <assign>
37: <nested-st-list> -> DEDENT
38: <assign> -> <expr>
39: <assign> -> id ( <arg-params>


---------------------------------------------------------------------------------------------
Pre program na tvorenie LL tabulky pre iný dovod to tu nieje
-----------------------------------------------------------------------------------------------
1: PROG  →  ST-LIST
2: ST-LIST  →  STAT eol ST-LIST
3: ST-LIST -> eof
4: STAT → def id ( PARAMS : eol indent NESTED-ST-LIST
5: STAT → id = ASSIGN
6: STAT → EXPR
7: STAT → pass
8: STAT → while EXPR : eol indent NESTED-ST-LIST
9: STAT → if EXPR : eol indent NESTED-ST-LIST else : eol NESTED-ST-LIST
10: PARAMS → )
11: PARAMS → id NEXT-PARAM
12: NEXT-PARAM → , PARAMS
13: NEXT-PARAM → )
14: ARG-PARAMS → )
15: ARG-PARAMS → VALUE ARG-NEXT-PARAMS
16: ARG-NEXT-PARAMS → , VALUE ARG-NEXT-PARAMS
17: ARG-NEXT-PARAMS → )
18: VALUE → none
19: VALUE → float
20: VALUE → string
21: VALUE → int
22: VALUE → id
23: FUNC-NESTED-ST-LIST -> FUNC-NESTED-STAT eol FUNC-NESTED-ST-LIST
24: FUNC-NESTED-STAT -> pass
25: FUNC-NESTED-STAT -> if EXPR : eol indent FUNC-NESTED-STAT else : eol FUNC-NESTED-STAT
26: FUNC-NESTED-STAT -> EXPR
27: FUNC-NESTED-STAT -> while EXPR : eol indent FUNC-NESTED-STAT
28: FUNC-NESTED-STAT -> id = ASSIGN
29: FUNC-NESTED-STAT -> return EXPR
30: FUNC-NESTED-STAT -> dedent
31: NESTED-ST-LIST → NESTED-STAT eol NESTED-ST-LIST
32: NESTED-STAT → pass
33: NESTED-STAT → if EXPR : eol indent NESTED-ST-LIST else : eol NESTED-ST-LIST
34: NESTED-STAT → EXPR
35: NESTED-STAT → while EXPR : eol indent NESTED-ST-LIST
36: NESTED-STAT → id = ASSIGN
37: NESTED-ST-LIST → dedent
38: ASSIGN → EXPR
39: ASSIGN → id ( ARG-PARAMS 
-----------------------------------------------------------------------------------------------